// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "windows", "darwin"]
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdBy   Int?
  updatedBy   Int?
}

model Role {
  id        Int        @id @default(autoincrement()) @map("id")
  name      String     @unique @map("name")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  UserRole  UserRole[]

  @@map("roles") // Optional: maps the model to a table named "roles" in the database
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  role      Role      @relation(fields: [roleId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("user_roles") // Optional: maps the model to a table named "user_roles" in the database
}

model User {
  id          Int        @id @default(autoincrement())
  firstNameTh String     @map("first_name_th")
  lastNameTh  String     @map("last_name_th")
  firstNameEn String?    @map("first_name_en")
  lastNameEn  String?    @map("last_name_en")
  email       String     @unique @map("email")
  nickName    String?    @map("nick_name")
  imageUrl    String?    @map("image_url")
  password    String     @map("password")
  createdDate DateTime   @default(now()) @map("created_date")
  updatedDate DateTime   @default(now()) @updatedAt @map("updated_date")
  deletedDate DateTime?  @map("deleted_date")
  createdBy   Int?       @map("created_by")
  updatedBy   Int?       @map("updated_by")
  UserRole    UserRole[]
  Admin       Admin?
  News        News[]
  Course      Course[]

  @@map("users") // Optional: maps the model to a table named "users" in the database
}

model Admin {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique @map("user_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  user      User      @relation(fields: [userId], references: [id])

  @@map("admins") // Optional: maps the model to a table named "admins" in the database
}

model Type {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ListType  ListType[]

  @@map("types") // Optional: maps the model to a table named "types" in the database
}

model ListType {
  id        Int      @id @default(autoincrement())
  name      String   @unique @map("name")
  typeId    Int      @map("type_id")
  type      Type     @relation(fields: [typeId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // News      News[]
  News      News[]

  @@map("list_types")
}

model News {
  id          Int       @id @default(autoincrement())
  title       String    @map("title")
  image       String    @map("image")
  detail      String    @map("detail")
  categoryId  Int       @map("category_id")
  startDate   DateTime  @map("start_date")
  dueDate     DateTime? @map("due_date")
  createdDate DateTime  @default(now()) @map("created_at")
  updatedDate DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedDate DateTime? @map("deleted_at")
  createdBy   Int       @map("created_by")
  updatedBy   Int       @map("updated_by")
  category    ListType  @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [updatedBy], references: [id])

  @@map("news")
}

model Course {
  id           Int      @id @default(autoincrement())
  courseId     String   @map("course_id")
  courseName   String   @map("course_name")
  courseDetail String   @map("course_detail")
  createdDate  DateTime @default(now()) @map("created_date")
  updatedDate  DateTime @updatedAt @map("updated_date")
  createdBy    Int      @map("created_by")
  updatedBy    Int      @map("updated_by")
  user         User     @relation(fields: [updatedBy], references: [id])

  @@map("courses")
}
