// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "windows", "darwin"]
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  createdDate DateTime  @default(now())
  updatedDate DateTime  @updatedAt
  deletedDate DateTime?
  createdBy   Int?
  updatedBy   Int?
}

model Role {
  id        Int        @id @default(autoincrement()) @map("id")
  name      String     @unique @map("name")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  UserRole  UserRole[]

  @@map("roles") // Optional: maps the model to a table named "roles" in the database
}

model UserRole {
  id          Int       @id @default(autoincrement()) @map("id")
  userId      Int       @map("user_id")
  roleId      Int       @map("role_id")
  createdDate DateTime  @default(now()) @map("created_date")
  updatedDate DateTime  @updatedAt @map("updated_date")
  deletedDate DateTime? @map("deleted_date")
  createdBy   Int       @map("created_by")
  updatedBy   Int       @map("updated_by")
  role        Role      @relation(fields: [roleId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("user_roles") // Optional: maps the model to a table named "user_roles" in the database
}

model User {
  id          Int        @id @default(autoincrement()) @map("id")
  firstNameTh String     @map("first_name_th")
  lastNameTh  String     @map("last_name_th")
  firstNameEn String?    @map("first_name_en")
  lastNameEn  String?    @map("last_name_en")
  email       String     @unique @map("email")
  nickName    String?    @map("nick_name")
  imageUrl    String?    @map("image_url")
  password    String     @map("password")
  createdDate DateTime   @default(now()) @map("created_date")
  updatedDate DateTime   @default(now()) @updatedAt @map("updated_date")
  deletedDate DateTime?  @map("deleted_date")
  createdBy   Int?       @map("created_by")
  updatedBy   Int?       @map("updated_by")
  UserRole    UserRole[]
  Admin       Admin?
  News        News[]
  NewsMedia   NewsMedia[]
  Course      Course[]
  Student     Student?
  Professor   Professor?
  

  @@map("users") // Optional: maps the model to a table named "users" in the database
}

model Admin {
  id          Int       @id @default(autoincrement()) @map("id")
  userId      Int       @unique @map("user_id")
  createdDate DateTime  @default(now()) @map("created_date")
  updatedDate DateTime  @updatedAt @map("updated_date")
  deletedDate DateTime? @map("deleted_date")
  createdBy   Int       @map("created_by")
  updatedBy   Int       @map("updated_by")
  user        User      @relation(fields: [userId], references: [id])

  @@map("admins") // Optional: maps the model to a table named "admins" in the database
}

model Type {
  id          Int        @id @default(autoincrement()) @map("id")
  name        String     @unique @map("name")
  createdDate DateTime   @default(now()) @map("created_date")
  updatedDate DateTime   @updatedAt @map("updated_date")
  ListType    ListType[]

  @@map("types") // Optional: maps the model to a table named "types" in the database
}

model ListType {
  id           Int            @id @default(autoincrement()) @map("id")
  name         String         @unique @map("name")
  typeId       Int            @map("type_id")
  type         Type           @relation(fields: [typeId], references: [id])
  createdDate  DateTime       @default(now()) @map("created_at")
  updatedDate  DateTime       @updatedAt @map("updated_at")
  News         News[]
  ExpertFields ExpertFields[]

  @@map("list_types")
}

model News {
  id          Int       @id @default(autoincrement()) @map("id")
  title       String    @map("title")
  image       String    @map("image")
  detail      String    @map("detail")
  categoryId  Int       @map("category_id")
  startDate   DateTime  @map("start_date")
  dueDate     DateTime? @map("due_date")
  createdDate DateTime  @default(now()) @map("created_at")
  updatedDate DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedDate DateTime? @map("deleted_at")
  createdBy   Int       @map("created_by")
  updatedBy   Int       @map("updated_by")
  category    ListType  @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [updatedBy], references: [id])
  NewsMedia   NewsMedia[]

  @@map("news")
}

model NewsMedia {
  id          Int       @id @default(autoincrement()) @map("id")
  image       String    @map("image")
  newsId      Int       @map("news_id")
  createdDate DateTime  @default(now()) @map("created_at")
  updatedDate DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedDate DateTime? @map("deleted_at")
  createdBy   Int       @map("created_by")
  updatedBy   Int       @map("updated_by")
  news        News      @relation(fields: [newsId], references: [id])
  user        User      @relation(fields: [updatedBy], references: [id])

  @@map("news_media")
} 

model TypeCourse {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @unique @map("name")
  description String   @map("description")
  createdDate DateTime @default(now()) @map("created_date")
  updatedDate DateTime @updatedAt @map("updated_date")
  Course      Course[]

  @@map("type_courses")
}

model Course {
  id              Int          @id @default(autoincrement()) @map("id")
  courseId        String       @map("course_id")
  credits         String       @map("credits")
  curriculumId    Int?         @map("curriculum_id")
  typeCourseId    Int?         @map("type_course_id")
  courseNameTh    String       @map("course_name_th")
  courseNameEn    String       @map("course_name_en")
  courseDetail    String       @map("course_detail")
  createdDate     DateTime     @default(now()) @map("created_date")
  updatedDate     DateTime     @updatedAt @map("updated_date")
  deletedDate     DateTime?    @map("deleted_date")
  createdBy       Int          @map("created_by")
  updatedBy       Int          @map("updated_by")
  user            User         @relation(fields: [updatedBy], references: [id])
  TypeCourse      TypeCourse?  @relation(fields: [typeCourseId], references: [id])
  curriculum      Curriculum?  @relation(fields: [curriculumId], references: [id])
  PrevCourse      PrevCourse[]
  PrerequisiteFor PrevCourse[] @relation("PrevCourseRelation")

  @@map("courses")
}

model PrevCourse {
  id           Int       @id @default(autoincrement()) @map("id")
  courseId     Int       @map("course_id")
  prevCourseId Int       @map("prev_course_id")
  createdDate  DateTime  @default(now()) @map("created_date")
  updatedDate  DateTime  @updatedAt @map("updated_date")
  deletedDate  DateTime? @map("deleted_date")
  createdBy    Int       @map("created_by")
  updatedBy    Int       @map("updated_by")
  PrevCourse   Course    @relation("PrevCourseRelation", fields: [prevCourseId], references: [id])
  Course       Course    @relation(fields: [courseId], references: [id])

  @@map("prev_courses")
}

model Student {
  id                   Int       @id @default(autoincrement()) @map("id")
  userId               Int       @unique
  studentId            String    @map("student_id")
  linkedin             String?   @map("linkedin")
  facebook             String?   @map("facebook")
  instagram            String?   @map("instagram")
  github               String?   @map("github")
  yearOfFirstAdmission Int       @map("year_of_first_admission")
  yearOfCompletion     Int?      @map("year_of_completion")
  classOf              String    @map("class_of")
  createdDate          DateTime  @default(now()) @map("created_date")
  updatedDate          DateTime  @updatedAt @map("updated_date")
  deletedDate          DateTime? @map("deleted_date")
  createdBy            Int       @map("created_by")
  updatedBy            Int       @map("updated_by")
  user                 User      @relation(fields: [userId], references: [id])

  @@map("students")
}

model Curriculum {
  id          Int       @id @default(autoincrement()) @map("id")
  year        String    @map("year")
  fileUrl     String    @map("file_url")
  imageUrl    String    @map("image_url")
  description String    @map("description")
  createdDate DateTime  @default(now()) @map("created_date")
  updatedDate DateTime  @updatedAt @map("updated_date")
  deletedDate DateTime? @map("deleted_date")
  createdBy   Int       @map("created_by")
  updatedBy   Int       @map("updated_by")
  courses     Course[]

  @@map("curriculums")
}

model Professor {
  id                Int            @id @default(autoincrement()) @map("id")
  userId            Int            @unique
  academicPosition  Int
  majorPosition     Int
  profRoom          String
  fieldOffexpertise String
  createdDate       DateTime       @default(now()) @map("created_date")
  updatedDate       DateTime       @updatedAt @map("updated_date")
  deletedDate       DateTime?      @map("deleted_date")
  createdBy         Int            @map("created_by")
  updatedBy         Int            @map("updated_by")
  user              User           @relation(fields: [userId], references: [id])
  Education         Education[]
  ExpertFields      ExpertFields[]

  @@map("professors")
}

model AcademicPosition {
  id          Int      @id @default(autoincrement()) @map("id")
  positionTh  String
  positionEn  String
  createdDate DateTime @default(now()) @map("created_date")
  updatedDate DateTime @updatedAt @map("updated_date")

  @@map("academic_position")
}

model EducationLevel {
  id          Int         @id @default(autoincrement()) @map("id")
  level       String      @map("level_en")
  createdDate DateTime    @default(now()) @map("created_date")
  updatedDate DateTime    @updatedAt @map("updated_date")
  Education   Education[]

  @@map("education_levels")
}

model Education {
  id             Int            @id @default(autoincrement()) @map("id")
  levelId        Int
  professorId    Int
  education      String
  createdDate    DateTime       @default(now()) @map("created_date")
  updatedDate    DateTime       @updatedAt @map("updated_date")
  deletedDate    DateTime?      @map("deleted_date")
  createdBy      Int            @map("created_by")
  updatedBy      Int            @map("updated_by")
  professor      Professor      @relation(fields: [professorId], references: [id])
  educationLevel EducationLevel @relation(fields: [levelId], references: [id])
}

model MajorPosition {
  id          Int      @id @default(autoincrement()) @map("id")
  positionTh  String
  positionEn  String
  createdDate DateTime @default(now()) @map("created_date")
  updatedDate DateTime @updatedAt @map("updated_date")

  @@map("majorPosition")
}

model ExpertFields {
  id          Int       @id @default(autoincrement()) @map("id")
  professorId Int       @map("professor_id")
  fieldId     Int       @map("field_id")
  createdDate DateTime  @default(now()) @map("created_date")
  updatedDate DateTime  @updatedAt @map("updated_date")
  deletedDate DateTime? @map("deleted_date")
  professor   Professor @relation(fields: [professorId], references: [id])
  field       ListType  @relation(fields: [fieldId], references: [id])

  @@map("expert_fields")
}
