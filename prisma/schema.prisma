// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserRole  UserRole[]

  @@map("roles") // Optional: maps the model to a table named "roles" in the database
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  Admin     Admin?
}

model User {
  id          Int        @id @default(autoincrement())
  firstNameTh String
  lastNameTh  String
  firstNameEn String
  lastNameEn  String
  email       String     @unique
  nickName    String
  imageUrl    String?
  password    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   Int?
  updatedBy   Int?
  UserRole    UserRole[]

  @@map("users") // Optional: maps the model to a table named "users" in the database
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int?
  updatedBy Int?
  user      UserRole @relation(fields: [userId], references: [id])

  @@map("admins") // Optional: maps the model to a table named "admins" in the database
}

model Type {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ListType  ListType[]

  @@map("types") // Optional: maps the model to a table named "types" in the database
}

model ListType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  typeId    Int
  type      Type     @relation(fields: [typeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("list_types") // Optional: maps the model to a table named "list_types" in the database
}
