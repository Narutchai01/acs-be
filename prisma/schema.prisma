// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "windows", "darwin"]
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdBy   Int?
  updatedBy   Int?
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserRole  UserRole[]

  @@map("roles") // Optional: maps the model to a table named "roles" in the database
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  DeletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  Admin     Admin?

  @@map("user_roles") // Optional: maps the model to a table named "user_roles" in the database
}

model User {
  id          Int        @id @default(autoincrement())
  firstNameTh String
  lastNameTh  String
  firstNameEn String?
  lastNameEn  String?
  email       String     @unique
  nickName    String?
  imageUrl    String?
  password    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
  createdBy   Int?
  updatedBy   Int?
  UserRole    UserRole[]
  createdNew  New[]      @relation("CreatedByUser")
  updatedNew  New[]      @relation("UpdatedByUser")

  @@map("users") // Optional: maps the model to a table named "users" in the database
}

model Admin {
  id         Int       @id @default(autoincrement())
  userRoleId Int       @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  DeletedAt  DateTime?
  createdBy  Int?
  updatedBy  Int?
  userRole   UserRole  @relation(fields: [userRoleId], references: [id])

  @@map("admins") // Optional: maps the model to a table named "admins" in the database
}

model Type {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ListType  ListType[]

  @@map("types") // Optional: maps the model to a table named "types" in the database
}

model ListType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  typeId    Int
  type      Type     @relation(fields: [typeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  New       New[]

  @@map("list_types") // Optional: maps the model to a table named "list_types" in the database
}

model New {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  image      String
  detail     String
  categoryId Int
  category   ListType @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  Int
  createUser User     @relation("CreatedByUser", fields: [createdBy], references: [id])
  updatedBy  Int
  updateUser User     @relation("UpdatedByUser", fields: [updatedBy], references: [id])

  @@map("news")
}
